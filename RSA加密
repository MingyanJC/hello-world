package com.moldyun.cloud.common.util;

import org.apache.commons.codec.binary.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.crypto.Cipher;
import java.math.BigInteger;
import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class RSAUtil {
    final static Logger logger = LoggerFactory.getLogger(RSAUtil.class);
    public static final String RSA_PUBLIC_KEY = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCP58qYllc90krx0og3u61ho96O46d8dYDaDLrL74bP+ATTBc/QXTfakvuVunxYe+BTYK3MlDmLOYIfX/DrkheyKeW9FGXJcKECbacNj7O7ok2DlXeKhIq+zX4kMCM1jIHZkHbO7X9bHmu7d3XvG8tuAJk9KPO6G7+TeOU7/Hp86QIDAQAB";
    public static final String RSA_PRIVATE_KEY = "MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAI/nypiWVz3SSvHSiDe7rWGj3o7jp3x1gNoMusvvhs/4BNMFz9BdN9qS+5W6fFh74FNgrcyUOYs5gh9f8OuSF7Ip5b0UZclwoQJtpw2Ps7uiTYOVd4qEir7NfiQwIzWMgdmQds7tf1sea7t3de8by24AmT0o87obv5N45Tv8enzpAgMBAAECgYBsq2tQgudqpe02Y/e9rpoli6u7V6rYz5r4DnjZHA4/6lkqSc8+18Yf5rLZxLO11gX2sKFORfiWbF0Y+EhkfDQrkjnMog+EdNrjCcIkqyrxieunx0yIL20J3c4KElKLMZqRL7QVv9xVP5BcFkBRJKPXFg5n+HXHvDnPCB0JQwY/AQJBAMnucrF8QVivqLu1MEpcukHbB/LLud6F6oKioYsbvBb8x2/8JJNdAJ88zI2YXedDonDV78AjxLWgYJB/6mM79ZkCQQC2b+eTthdLWmOXqTnogvBtIo4Tme4nd1EGJ0AkSUuQyBB4Xj/F1KcjEZ2oGM8OXv5rs3aXKV0U7BXg77GAVbPRAkEAhwhmOBvAUv78VbGfPkrt3rYKhakIfS6OGJeKcUy1paWZ9F/nUYgCr3lnzFQUj17iFJRrg9AnbdF2YYq4gW2KGQJBAI3TSPAn6swFpM7OG9qJkGcHKfRLAj1kIHTsJo0O/dO79DHe8yzUOGqm0y1OvAisCJWpmlPBMD+HmSqYrCDcf0ECQCVSPIThHkXIHf95RTfvQAtk480iFbJC1ihXs+Dd+Uo2vuIy9EEhje2ZZ5XvB6eX1fEWaBMxgimry9CppTQ4cNg=";
    private static final String KEY_ALGORITHM = "RSA";
    private static final String SIGNATURE_ALGORITHM = "MD5withRSA";
    private static final String PUBLIC_KEY = "RSAPublicKey";
    private static final String PRIVATE_KEY = "RSAPrivateKey";

    public BigInteger n, e;// 公钥
    private BigInteger d;// 私钥
    private BigInteger p, q;
    private BigInteger eul;// n的欧拉函数

    public RSAUtil() {
    }

    public static String encryptBASE64(byte[] bytes) {
        return Base64.encodeBase64String(bytes);
    }

    public static byte[] decryptBASE64(String key) {
        return Base64.decodeBase64(key);
    }

    /**
     * 初始化密钥
     * @return
     * @throws Exception
     */
    public static Map<String, Key> initKey() throws Exception {
        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(KEY_ALGORITHM);
        keyPairGen.initialize(1024);
        KeyPair keyPair = keyPairGen.generateKeyPair();
        Map<String, Key> keyMap = new HashMap(2);
        //公钥
        keyMap.put(PUBLIC_KEY, keyPair.getPublic());
        //私钥
        keyMap.put(PRIVATE_KEY, keyPair.getPrivate());
        return keyMap;
    }

    /**
     * 取得公钥
     * @param keyMap
     * @return
     */
    public static String getPublicKey(Map<String, Key> keyMap) {
        Key key = (Key) keyMap.get(PUBLIC_KEY);
        return encryptBASE64(key.getEncoded());
    }

    /**
     * 取得私钥
     * @param keyMap
     * @return
     * @throws Exception
     */
    public static String getPrivateKey(Map<String, Key> keyMap) throws Exception {
        Key key = (Key) keyMap.get(PRIVATE_KEY);
        return encryptBASE64(key.getEncoded());
    }

    /**
     * 加密<br>
     * 用公钥加密
     *
     * @param data
     * @param key
     * @return
     * @throws Exception
     */
    public static byte[] encryptByPublicKey(String data, String key) throws Exception {
        byte[] keyBytes = decryptBASE64(key);
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key publicKey = keyFactory.generatePublic(x509KeySpec);
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(1, publicKey);
        return cipher.doFinal(data.getBytes());
    }

    /**
     * 加密<br>
     * 用私钥加密
     *
     * @param data
     * @param key
     * @return
     * @throws Exception
     */
    public static byte[] encryptByPrivateKey(String data, String key) throws Exception {
        byte[] keyBytes = decryptBASE64(key);
        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(1, privateKey);
        return cipher.doFinal(data.getBytes());
    }

    public static byte[] decryptByPublicKey(String data, String key) throws Exception {
        return decryptByPublicKey(decryptBASE64(data), key);
    }

    public static byte[] decryptByPublicKey(byte[] data, String key) throws Exception {
        byte[] keyBytes = decryptBASE64(key);
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key publicKey = keyFactory.generatePublic(x509KeySpec);
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(2, publicKey);
        return cipher.doFinal(data);
    }

    public static byte[] decryptByPrivateKey(String data, String key) throws Exception {
        return decryptByPrivateKey(decryptBASE64(data), key);
    }

    public static byte[] decryptByPrivateKey(byte[] data, String key) throws Exception {
        byte[] keyBytes = decryptBASE64(key);
        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(2, privateKey);
        return cipher.doFinal(data);
    }

    public static String sign(byte[] data, String privateKey) throws Exception {
        byte[] keyBytes = decryptBASE64(privateKey);
        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        PrivateKey priKey = keyFactory.generatePrivate(pkcs8KeySpec);
        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
        signature.initSign(priKey);
        signature.update(data);
        return encryptBASE64(signature.sign());
    }

    public static boolean verify(byte[] data, String publicKey, String sign) throws Exception {
        byte[] keyBytes = decryptBASE64(publicKey);
        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        PublicKey pubKey = keyFactory.generatePublic(keySpec);
        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
        signature.initVerify(pubKey);
        signature.update(data);
        return signature.verify(decryptBASE64(sign));
    }

    public static String decryptPropertie(String value) {
        if (!StringUtil.isNullOrEmpty(value) && value.startsWith("[RSA]")) {
            try {
                return new String(decryptByPublicKey(value.substring(5), "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCP58qYllc90krx0og3u61ho96O46d8dYDaDLrL74bP+ATTBc/QXTfakvuVunxYe+BTYK3MlDmLOYIfX/DrkheyKeW9FGXJcKECbacNj7O7ok2DlXeKhIq+zX4kMCM1jIHZkHbO7X9bHmu7d3XvG8tuAJk9KPO6G7+TeOU7/Hp86QIDAQAB"));
            } catch (Exception var2) {
                logger.error("加密配置项解密失败:", var2);
                throw new RuntimeException("加密配置项解密失败");
            }
        } else {
            return value;
        }
    }

    /**
     * 函数功能:初始化RSA对象的相关信息
     * 参数含义:len表示大素数的二进制位数
     */
    public void init(int len) {
        Random random = new Random();
        // 产生大素数p和q
        p = BigInteger.probablePrime(len, random);
        q = BigInteger.probablePrime(len, random);
        // 计算出n
        n = p.multiply(q);
        // 计算出n的欧拉函数
        eul = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
        // 设置加解密指数e和d
        createExponent(eul);
    }

    /**
     * 函数功能:使用公钥进行加密
     * 参数含义:m表示要加密的明文
     */
    public BigInteger encryptByPublic(BigInteger m) {
        return m.modPow(e, n);
    }

    /**
     * 函数功能:使用私钥进行解密
     * 参数含义:c表示要解密的密文
     */
    public BigInteger decryptByPrivate(BigInteger c) {
        return c.modPow(d, n);
    }

    // 以下主要用于数字签名

    /**
     * 函数功能:使用私钥进行加密
     * 参数含义:m表示要加密的明文
     */
    public BigInteger encryptByPrivate(BigInteger m) {
        return decryptByPrivate(m);
    }

    /**
     * 函数功能:使用公钥进行解密
     * 参数含义:c表示要解密的密文
     */
    public BigInteger decryptByPublic(BigInteger c) {
        return encryptByPublic(c);
    }

    /**
     * 函数功能:从一个欧拉数中生成公钥、私钥指数
     * 参数含义:eul表示提供的欧拉数
     */
    private void createExponent(BigInteger eul) {
        // TODO Auto-generated method stub
        e = new BigInteger("65537");
        d = e.modInverse(eul);
    }

    public static void main(String[] args) throws Exception {
        /*RSAUtil rsaUtil = new RSAUtil();
        rsaUtil.init(1024);
        BigInteger bigInteger = rsaUtil.encryptByPublic(new BigInteger("102410241024"));
        BigInteger bigInteger1 = rsaUtil.decryptByPrivate(bigInteger);
        System.err.println("公钥加密后: " + bigInteger);
        System.err.println("私钥解密后: " + bigInteger1);*/
        Map<String, Key> keyMap = initKey();
        String publicKey = getPublicKey(keyMap);
        String privateKey = getPrivateKey(keyMap);
        System.err.println("公钥: " + publicKey);
        System.err.println("私钥: " + privateKey);
        byte[] encodedData = encryptByPublicKey("xiaojie", publicKey);
        System.err.println("公钥加密后: " + new String(encryptBASE64(encodedData)));
        byte[] decodedData = decryptByPrivateKey(encodedData, privateKey);
        System.err.println("私钥解密后: " + new String(decodedData));

    }
}
